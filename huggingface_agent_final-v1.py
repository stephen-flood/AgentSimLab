
"""# HuggingFace Agents Final Project

- Wierdest part of the projeect
  - Poorly documented how to access the problems
  - Many tasks/questions include attachments
- Varied format types
  - image
  - text
  - excel
  - video (youtube)
- Before constructing an *agent* who can use tools, **first** need to figure out how to pass multimodal queries to the model.
  - First source = https://ai.google.dev/gemini-api/docs/text-generation#python_1
  - Second source = conversation with o4-mini-high.  Eventually, it became clear that context can be a list of Part objects, and that there are different objects for different cases
  - Third source = https://googleapis.github.io/python-genai/genai.html#genai.types.Part -- semantics and syntax of Part objects confirmed

## HuggingFace Course Specific - obtain questions and files

Simple combination of  
- Examples from https://agents-course-unit4-scoring.hf.space/docs#/
- Python `requests` library.
"""

import requests

def get_random_question():
  url = 'https://agents-course-unit4-scoring.hf.space/random-question'
  headers = {'accept': 'application/json'}
  response = requests.get(url, headers=headers)
  response.raise_for_status()         # throws if status is 4xx/5xx
  problem_data = response.json()   # directly gives you the parsed dict
  return problem_data

def get_all_questions():
  url = 'https://agents-course-unit4-scoring.hf.space/questions'
  headers = {'accept': 'application/json'}
  response = requests.get(url, headers=headers)
  response.raise_for_status()         # throws if status is 4xx/5xx
  list_of_problems = response.json()   # directly gives you the parsed dict
  return list_of_problems

def get_url_from_name(file_name):
  return 'https://agents-course-unit4-scoring.hf.space/files/' + file_name

# # Test data access functions
data = get_random_question()
print(data)

task_id = data["task_id"]
question_text = data["question"]
file_name = data["file_name"]

print(task_id)
print(question_text)
print(file_name)

"""## Google/Gemini-specific code to generate multimodal queries.

- `get_Part_from_name` processes a description string (local file or URL) to create an object that can be used in the `content` of a `google.genai` query.
- `generate_gemini_query_content` constructs a specific query consisting of
    - Prompt
    - Additional files added if needed
"""

from urllib.parse import urlparse
import mimetypes
from google.genai import types

def get_Part_from_name(ref :str):
    """
    Obtain an object for a file or URL that can be included in a Gemini API call.

    Args:
        ref (str): The reference or URL to the file

    Returns:
        types.Part: A "types.Part" object that can be included
                                   in the "contents" list for the Gemini API
    """
    is_url = urlparse(ref).scheme in ("http", "https")
    if is_url:
        # check if the url is youtube
        if "youtube.com" in ref:
            mime = "video/mp4"
            return types.Part.from_uri(file_uri = ref, mime_type = mime)
        else:
          mime, _ = mimetypes.guess_type(ref)
          return types.Part.from_uri(
                file_uri = ref,
                mime_type = mime,
              )
    else:
        mime, _ = mimetypes.guess_file_type(ref)
        return types.Part.from_bytes(ref, mime)

# print(get_Part_from_name("https://www.youtube.com/watch?v=1htKBjuUWec"))
# print("")
# print(get_Part_from_name("https://agents-course-unit4-scoring.hf.space/files/f918266a-b3e0-4914-865d-4faa564f1aef.py"))

def generate_gemini_query_content(instructions: str, problem_dictionary: dict ):
  task_id = problem_dictionary["task_id"]
  question_text = problem_dictionary["question"]

  if "file_name" in problem_dictionary:
    file_name = problem_dictionary["file_name"]
    file_instructions = f"Use the information in {file_name} to answer the question."
  else:
    file_instructions = ""

  prompt_text = """
  Instructions:
  {instructions}

  Question Text:
  {question_text}

  {file_instructions}
  """.format(instructions=instructions,
             question_text=question_text,
             file_instructions=file_instructions)
  context = [ types.Part.from_text(prompt_text) ]

  if "file_name" in problem_dictionary:
    file_name = problem_dictionary["file_name"]
    file_object = get_Part_from_name(file_name)
    context.append(file_object)

  return context

"""## Gemini Part syntax (generated by o4-mini-high )

**Note** Not guaranteed to be correct, generated by LLM

**Description:**
Use any combination of these in your contents=[…] list to multimodally prompt Gemini with text, images, video, audio, documents, or function calls—all through a unified interface.

| Factory Method                                          | Purpose                      | When to Use                                                                                   | Example Snippet                                                                                                    |
|---------------------------------------------------------|------------------------------|-----------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------|
| `Part.from_text(text: str)`                             | Wrap plain text              | Pure-text prompts or system instructions                                                      | ``types.Part.from_text("Why is the sky blue?")``                                                                   |
| `Part.from_bytes(data: bytes, mime_type: str)`          | Embed inline binary content  | Small files (<20 MB) you want to send directly (images, audio, PDF, etc.)                    | ``img_bytes = open("photo.jpg","rb").read(); types.Part.from_bytes(data=img_bytes, mime_type="image/jpeg")``       |
| `Part.from_uri(uri: str, mime_type: str)`               | Reference a remote resource  | Larger or hosted assets you don’t want to load into memory (images, videos, documents)       | ``types.Part.from_uri(uri="https://youtu.be/ID", mime_type="video/mp4")``                                           |
| `Part.from_function_call(name: str, args: dict)`        | Encode a function invocation | Tool-augmented workflows—telling the model to call a function                                 | ``types.Part.from_function_call(name="get_weather", args={"location":"Boston"})``                                  |
| `Part.from_function_response(name: str, response: dict)`| Wrap a function’s output     | Feeding tool results back into a chat or subsequent inference                                 | ``types.Part.from_function_response(name="get_weather", response={"temp":"72°F"})``                                |
"""

from google import genai
from google.genai import types
contents = [
# types.Part.from_text('What is this image about?'),
types.Part.from_uri(file_uri='gs://generativeai-downloads/images/scones.jpg', mime_type='image/jpeg') # Call the function with keyword arguments
]

import pprint
pprint.pp(get_all_questions())